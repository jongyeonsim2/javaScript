1. 매개변수 기본값
  function hello(name, message = "hello") {
      console.log(`${name}, ${message}`)
  }

2. 나머지 매개변수

3. 배열 연결하기(전개 구문)
   - 배열 복사
     얕은 복사 : 변수로 복사
     깊은 복사 : 전개 구문

4. 객체의 프로퍼티
   - 프로퍼티 명(key)에 공백이 있는 경우
     book.published date = "2023-01" // 에러
     book["published date"] = "2023-01"  // 사용 가능.

   - 계산된 프로퍼티 이름
     프로퍼티(key) 자리에 함수를 호출해서 사용 가능
     book[fn()] 

   - 단축된 프로퍼티 사용
     함수에서 객체를 생성 후 반환.
     함수의 매개변수를 객체의 프로퍼티 명(key)로 사용.
     함수의 매개변수의 값은 프로퍼티 의 값(value)로 사용.

      function makeUser(name, age) {
        return {
          name : name, 
          age : age
        }
      }

      function makeUser(name, age) {
        return {
          name, 
          age
        }
      }

   - 객체에 Symbol() 사용하기
     Symbol : 한 번 정의하면 값을 변경할 수 없고 유일한 값을 가짐.
     객체를 만들면서 일부 정보를 드러내지 않을 경우 사용. => 프라이빗 객체
     자바의 캡슐화가 가능.

     for, Object.keys(), Object.values(), Object.entries() 확인이 안됨.

   - 전역 Symbol
     여러 프로그램에서 하나의 객체를 공유해서 사용하는 경우.
     전역 심볼 레지스터리에 저장되고, Symbol.for(), Symbol.keyFor() 를 이용해서
     접근.

     let tel3 = Symbol.for("tel3")
     let phoneNumber3 = Symbol.for("tel3")
     tel3 === phoneNumber3 //true

5. 구조 분해 할당
   주어진 자료의 구조를 분해해서 변수에 할당하는 기능.
   => 디스트럭팅(distructing)

   5.1 배열
      let [fruit1, fruit2, fruit3] = fruit  //배열의 디스트럭팅
      let [member1, member2] = []       //undifined
      let [, fruit4,] = fruit           //일부 요소만 분해 및 할당
      let [fruit5, ...fruit6] = fruit1  //첫 번 요소, 나머지 요소
      [x, y] = [y, x]                   // 두 변수의 값을 교환

   5.2 객체
      변수의 이름과 객체의 프로퍼티의 이름이 동일해야 함.

      const member3 = {
        name3 : "hong",
        age3 : 30
      }

      let {name3, age3} = member3   // 정상적으로 디스트럭팅이 됨.

      let {name4, age4} = member3   // 디스트럭팅이 되지 않음.
                                    // 객체의 프로퍼티명과 변수의 이름이 다름.

      - 변수명을 새로 설정
        let {name3 : nameVar, age3 } = member3

      - 중첩 객체의 디스트럭팅
        const student = {
            name : "kim",
            score : {
                history : 80,
                science : 100
            },
            friend : ["hong","lee","park"]
        }

        let {
            name,
            score : {
                history,
                science
            },
            friend : [f1,f2,f3]
        } = student


6. 배열을 변형하는 메서드
   6.1 map()
       각 배열 요소에 똑같은 함수를 실행한 후 그 결과를 새로운 배열로 반환

        let numbers_2 = [1,2,3,4,5]
        let newNumbers_2 = numbers_2.map(num => num * 2)

        // (num, idx) : 첫 번째 요소는 요소값, 두 번째 요소는 배열의 인덱스
        let newNumbers_3 = numbers_2.map((num, idx) => idx + (num * 3))

   6.2 filter()
       특정 조건에 맞는 요소만 골라내는 함수.

       let resultArr = numbers_2.filter(num => num >= 3)


   6.3 reduce()
       배열 원소에 차례대로 함수를 실행해서 하나의 결과 값을 만듬. ( 누산기 기능 )

      let resultVar = numbers_2.reduce((tot, cur) => tot + cur, 0)
      // (tot, cur), tot는 누산결과변수, cur은 배열의 요소
      // tot + cur, 0, tot + cur 누산결과변수에 요소값을 더하는 처리,
      //               0, 누산결과변수의 초기화 값.


7. Map, Set
   7.1 도입 배경( 기존 자료구조의 개선점 )
      - 객체에서 프로퍼티는 문자만 가능.
        Map 에서는 모든 유형의 값을을 프로퍼티로 사용 가능.
      - 객체에서는 프로퍼티간의 순서가 없음.
        Map, Set에서는 순서가 있음.
      - 객체에서는 반복문으로 프로퍼티의 반복 사용이 안됨.
        Map, Set에서는 가능. for...of 사용 가능.
      - 객체에서 객체 자신을 위한 다양한 메소도와 프로퍼티가 많지 않음.
        Map, Set에서는 별도의 프로퍼티와 다양한 메소드를 지원함.

   7.2 Map
      key, value가 하나의 쌍으로 이루어짐. 객체와 비슷.
      key(프로퍼티)는 문자열 뿐만이 아니라 모든 자료형을 사용가능.
      객체 및 함수까지도 사용가능.

      Map을 사용하려면 new 예약으를 사용해서 인스턴스를 만들어서 사용.

      - 프로퍼티
        size
      - 메소드
        set, get, has, delete, clear, kyes, values, entries

   7.3 Set
      키가 없음. 배열과 비슷함. 값이 중복되지 않음.





      


