1. 서버와의 통신
   - 동기 통신 :
     a. request 를 서버로 전송. 
       ( client 는 respose 를 받기까지 대기. ) 
       => 브라우저가 대기. => 동기
     b. 서버에서는 수신된 request 를 분석 후 처리.
     c. 서버에서는 처리 결과를 client에게 response 함.

   - 비동기 통신 : 일반적으로 사용. AJAX( 비동기 통신 방법 )
     a. request 를 서버로 전송. 
       ( client 는 respose 를 받기까지 대기하지 않음. )
        => 브라우저는 자기 할일을 하고, 
           response 가 오면 처리하면 됨.  => 비동기
     b. 서버에서는 수신된 request 를 분석 후 처리.
     c. 서버에서는 처리 결과를 client에게 response 함.

     AJAX( 비동기 통신 방법 )
     A : 비동기
     J : JavaScript
     A : And
     X : XML( JSON, HTML 등 사용 가능. )

     페이지 전체를 다시 가져오지 않고도 사용자의 이벤트에 따라서
     언제든지 웹 페이지의 일부만 최신 내용으로 표시할 수 있는
     비동기 기법임.

   1.1 XMLHttpRequest 
     - XML 및 JSON을 비롯한 여러 유형의 데이터를 HTTP 프로토콜을 사용해서
       서버와 통신을 하기 위해 요청을 한는데 사용하는 객체.

     - 사용순서( 단계 )
       a. 객체 생성
          let xhr = new XMLHttpRequest();

       b. 요청 초기화
          open() 메소드
          xhr.open("GET", "student.json");

          - 방식( GET, POST )
          - 요청할 서비스의 서버의 URL
          - 비동기 여부. default 는 true (비동기)

       c. 초기화 한 요청을 서버로 전송.
          send() 메소드
          xhr.send();

       d. 서버에서 전송한 XMLHttpRequest 객체가 반환됨. 
          xhr 이라고 참조 변수를 사용.

       e. xhr 의 property의 value를 확인.
          hxr.readyState : 서버에서 전송한 데이터 ( 4 )
          xhr.status : HTTP 상태 코드( 200번, OK )

       f. hxr.responseText 의 value 를 parsing.
          서버에서 전송된 JSON 데이터를 객체 로 변환.
          let student = JSON.parse(xhr.responseText);


2. 예외 처리

   2.1 기본형
       try {
          에러가 발생할 가능성이 있는 코드.
       } catch ( 에러 ) {
          예외 처리할 코드 작성.
       } finally {
          예외의 발생 유무와 관계없이 실행되는 코드.
       }

   2.2 예외 출력
       - console.log() 보다는 console.error() 를 사용하면 
       에러 발생시 확인이 더 쉬움.

       - 에러의 property는 name, message 등을 구분해서 사용 가능.

   2.3 throw
       사용자 예외를 생성할 수 있음.

       - JSON 데이터를 객체로 변환 후, 존재하지 않는 property 를 사용하려는 경우.
         존재하지 않는 property 는 javascript undefined 자료로 판단함.

         undefined의 판단 조건으로 !undefined 로 사용하면
         if 문의 조건식에서 활용 가능함. => exception을 throw 시킴.

         존재하지 않는 property 를 console 로 출력하면, undefined 가 출력이 됨.
         !undefined => !false => true.


3. 비동기 프로그래밍

   3.1 javascript 비동기 방식
       자바스크립트는 싱글 스레드를 사용.
       싱글 스레드로 동작을 하면, 코드상에서 위에서 아래로 
       순서대로 처리를 하지만, 시간이 많이 걸리는 작업이 있다면,
       따로 처리해서 싱글 스레드의 단점을 보완.

   3.2 세 가지 비동기 방식
       - 콜백 함수, 예전 부터 계속 상용되어오고 있음.
         콜백 함수가 연속해서 반복 사용이 되는 경우 => 콜백 지옥
         콜백 지옥의 대안으로 나온 것이 프로미스 방식임.

       - 프로미스, ES2015 부터 
         프로미스 방식의 비동기 프로그래밍을 하기위해서는 
         a. 먼저 promise 객체를 생성. ( 제작 코드 )
            resolve 콜백 : then() 메소드와 연결
            reject 콜백 : catch() 메소드와 연결
         b. promise 객체를 사용하는 쪽을 구현. ( 소비 코드 )
            then() 메소드 : promise에서 성공했다는 결과를 보낼 때
            catch() 메소드 : promise에서 실패했다는 결과를 보낼 때
            finally() 메소드 : 마지막에 항상 실행됨.





       - async, await, ES2017 부터





